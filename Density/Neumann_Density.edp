load "medit"
load "msh3"

// To make FreeFem++ a bit more quiet
verbosity = 0;

/* Read a .sol file containing a scalar-valued solution */
// Thank to Charles Dapogny for this function.
func int loadsol(string sin, real[int] & u) {
  ifstream fin(sin);
  string s;
  int np;

  /* Read header */
  for(int i=0; i<5; i++) {
    fin >> s;
  }

  /* Parse number of vertices */
  fin >> np;

  /* Read header (bis) */
  for(int i=0; i<2; i++) {
    fin >> s;
  }

  /* Read values of the solution */
  for(int i=0; i<np; i++) {
    fin>>u[i];
  }
  return(1);
}

macro GradS(s) [dx(s), dy(s), dz(s)] // EOM

// The paths of the files
string meshPath = ARGV[2] + ".mesh";
string solPath = ARGV[2] + ".sol";

// The parameter to make the problem elliptic
real epsilon = 1e-4;

// Opening the mesh file
meshS Th = readmeshS(meshPath);

// Defining the Finite Element space
fespace Vh(Th, P1);
Vh rho, uh, vh;

// Loading the solution file (density)
loadsol(solPath, rho[]);

// Shows the density (takes a lot of time, you should just use medit in the command-line)
// medit("Optimal density.", Th, rho, wait=1);

cout << "Total mass : " << int2d(Th) (rho) << endl;

// Set the bilinear forms
varf va(uh, vh) = int2d(Th)( (epsilon+rho)*GradS(uh)'*GradS(vh) );
varf vb(uh, vh) = int2d(Th)( (epsilon*epsilon+rho)*uh*vh);

matrix A = va(Vh, Vh ,solver = sparsesolver); // Matrix A on left side
matrix B = vb(Vh, Vh);                        // Matrix B on right side

// Get first Eigenvalues
int eigCount = 10;
real[int] ev(eigCount); // Holds Eigenvalues
Vh[int] eV(eigCount);   // Holds Eigenfunctions

int numEigs = EigenValue(A,B,sym=true,sigma=0,value=ev,vector=eV);

for(int i=0;i<eigCount;i++) { // Plot the spectrum and show the eigenvalues
  cout << "Eigenvalue " << i << " : "  << ev[i] << endl;
}


/* Save scalar function u as a .sol file */
func int printsol(string sout, real[int] & u) {

  int n = u.n;
  ofstream fout(sout);

  /* Header */
  fout << "MeshVersionFormatted 1\n\nDimension 3\n\nSolAtVertices\n"<<n<<"\n1 1\n"<<endl;

  /* Print values */
  for (int k=0; k<n; k++)
    fout<<u[k]<<endl;

  /* End keyword */
  fout<<"End"<<endl;

  return(1);
}

Vh u = eV[1];
printsol("sphere_with_strip.sol",eV[1][]);
savemesh(Th, "sphere_with_strip.mesh");

cout << "Valeurs propres : " << ev << endl;
cout << "Surface totale : " << int2d(Th)(1) << endl;